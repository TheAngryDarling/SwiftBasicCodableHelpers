//
//  UnkeyedEncodingContainer+BasicCodableHelpers.dswift
//  BasicCodableHelpers
//
//  Created by Tyler Anger on 2021-02-20.
//

import Foundation
#if swift(>=4.2)
    #if canImport(CustomInts)
import CustomInts
    #endif
#endif

<%!

func buildFunctions(for group: String, withTypes groupTypes: [String]) -> String {
    var rtn: String = "//\(group)\n"
    rtn += "public extension UnkeyedEncodingContainer {\n"
    for groupType in groupTypes {
        var templatePrefix: String = ""
        var templateSuffix: String = ""
        if groupType == "T" {
            templatePrefix = "<T>"
            templateSuffix = " where T: Encodable, T: Equatable"
        }
        
        var fnc = """
            /// Encodes the given value for the given key.
            ///
            /// - parameter value: The value to encode.
            /// - parameter condition: The condition to test if the value should be encoded
            /// - throws: `EncodingError.invalidValue` if the given value is invalid in the current context for this format.
            /// - returns: Returns an indicator if the object was encoded or not
            @discardableResult
            mutating func encode\(templatePrefix)(_ value: \(groupType),
                                 where condition: (\(groupType)) -> Bool) throws -> Bool\(templateSuffix) {
                guard condition(value) else { return false }
                try self.encode(value)
                return true
            }

            /// Encodes the given value for the given key.
            ///
            /// - parameter value: The value to encode.
            /// - parameter condition: The condition to test if the value should be encoded
            /// - throws: `EncodingError.invalidValue` if the given value is invalid in the current context for this format.
            /// - returns: Returns an indicator if the object was encoded or not
            @discardableResult
            mutating func encodeIfPresent\(templatePrefix)(_ value: \(groupType)?,
                                 where condition: (\(groupType)) -> Bool) throws -> Bool\(templateSuffix) {
                guard let val = value else { return false }
                return (try self.encode(val, where: condition))
            }

            /// Encodes the given value for the given key.
            ///
            /// - parameter value: The value to encode.
            /// - parameter nValue: The value it should be for encoding to occur
            /// - throws: `EncodingError.invalidValue` if the given value is invalid in the current context for this format.
            /// - returns: Returns an indicator if the object was encoded or not
            @discardableResult
            mutating func encode\(templatePrefix)(_ value: \(groupType),
                                 if nValue: @autoclosure () -> \(groupType)) throws -> Bool\(templateSuffix) {
                return (try self.encode(value, where: { $0 == nValue() }))
            }

            /// Encodes the given value for the given key.
            ///
            /// - parameter value: The value to encode.
            /// - parameter nValue: The value it should be for encoding to occur
            /// - throws: `EncodingError.invalidValue` if the given value is invalid in the current context for this format.
            /// - returns: Returns an indicator if the object was encoded or not
            @discardableResult
            mutating func encodeIfPresent\(templatePrefix)(_ value: \(groupType)?,
                                 if nValue: @autoclosure () -> \(groupType)) throws -> Bool\(templateSuffix) {
                return (try self.encodeIfPresent(value,
                                                 where: { $0 == nValue() }))
            }

            /// Encodes the given value for the given key.
            ///
            /// - parameter value: The value to encode.
            /// - parameter nValue: The value it should not be for encoding to occur
            /// - throws: `EncodingError.invalidValue` if the given value is invalid in the current context for this format.
            /// - returns: Returns an indicator if the object was encoded or not
            @discardableResult
            mutating func encode\(templatePrefix)(_ value: \(groupType),
                                 ifNot nValue: @autoclosure () -> \(groupType)) throws -> Bool\(templateSuffix) {
                return (try self.encode(value,
                                        where: { $0 != nValue() }))
            }

            /// Encodes the given value for the given key.
            ///
            /// - parameter value: The value to encode.
            /// - parameter nValue: The value it should not be for encoding to occur
            /// - throws: `EncodingError.invalidValue` if the given value is invalid in the current context for this format.
            /// - returns: Returns an indicator if the object was encoded or not
            @discardableResult
            mutating func encodeIfPresent\(templatePrefix)(_ value: \(groupType)?,
                                 ifNot nValue: @autoclosure () -> \(groupType)) throws -> Bool\(templateSuffix) {
                return (try self.encodeIfPresent(value,
                                                 where: { $0 != nValue() }))
            }
        """
        rtn += fnc
    }
    rtn += "\n}\n"
    return rtn
}
    
%>

<%
let knownTypeGroups: [String: [String]] = [
    "Ints": ["Int8", "Int16", "Int32", "Int64", "Int"],
    "UInts": ["UInt8", "UInt16", "UInt32", "UInt64", "UInt"],
    "Other": ["Bool", "Double", "Float", "String", "T"],
]
%>

<% for key in ["Ints","UInts","Other"] /* Did it this way to ensure the order I wanted */ { %>
<%=buildFunctions(for: key, withTypes: knownTypeGroups[key]!)%>
<% } %>

#if swift(>=4.2)
    #if canImport(CustomInts)
<%=buildFunctions(for: "Custom Ints", withTypes: ["Int24", "Int40", "Int48", "Int56"])%>
<%=buildFunctions(for: "Custom UInts", withTypes: ["UInt24", "UInt40", "UInt48", "UInt56"])%>
    #endif
#endif


public extension UnkeyedEncodingContainer {
    /// Provides access to a KeyedDecodingContainer for the given SingleValueDecodingContainer
    mutating fileprivate func nestedContainer<NestedKey>(keyedBy keyType: NestedKey.Type,
                                                block: @escaping (inout KeyedEncodingContainer<NestedKey>) throws -> Void) throws {
        //try self.encode(KeyedEncoderHelper(keyType: keyType, block: block))
        let encoder = self.superEncoder()
        var container = encoder.container(keyedBy: keyType)
        try block(&container)
    }
    
    
    /// Provides access to a KeyedDecodingContainer for the given SingleValueDecodingContainer
    mutating fileprivate func nestedUnkeyedContainer(block: @escaping (inout UnkeyedEncodingContainer) throws -> Void) throws -> Void {
        //try self.encode(UnkeyedEncoderHelper(block: block))
        let encoder = self.superEncoder()
        var container = encoder.unkeyedContainer()
        try block(&container)
    }
}


public extension UnkeyedEncodingContainer {
    /// Encode a collection of objects if the collection has any objects
    /// - Parameters:
    ///   - value: The collection of objects to encode
    ///   - condition: test condition to indicate if encoding should occur
    /// - Throws: `EncodingError.invalidValue` if the given value is invalid in
    /// - returns: Returns an indicator if the object was encoded or not
    @discardableResult
    mutating func encode<C>(_ value: C,
                            where condition: (C) -> Bool) throws -> Bool where C: Encodable, C: Collection {
        guard condition(value) else { return false }
        try self.encode(value)
        return true
    }
    
    /// Encode a collection of objects if the collection has any objects
    /// - Parameters:
    ///   - value: The collection of objects to encode
    ///   - condition: test condition to indicate if encoding should occur
    /// - Throws: `EncodingError.invalidValue` if the given value is invalid in
    /// - returns: Returns an indicator if the object was encoded or not
    @discardableResult
    mutating func encodeIfPresent<C>(_ value: C?,
                                where condition: (C) -> Bool) throws -> Bool where C: Encodable, C: Collection {
        guard let val = value else { return false }
        return try self.encode(val, where: condition)
    }
    
    /// Encode a collection of objects if the collection has any objects
    /// - Parameters:
    ///   - value: The collection of objects to encode
    /// - Throws: `EncodingError.invalidValue` if the given value is invalid in
    /// - returns: Returns an indicator if the object was encoded or not
    @discardableResult
    mutating func encodeIfNotEmpty<C>(_ value: C) throws -> Bool where C: Encodable, C: Collection {
        return try self.encode(value,
                               where: { return !$0.isEmpty })
    }
    
    /// Encode a collection of objects if the collection has any objects
    /// - Parameters:
    ///   - value: The collection of objects to encode
    /// - Throws: `EncodingError.invalidValue` if the given value is invalid in
    /// - returns: Returns an indicator if the object was encoded or not
    @discardableResult
    mutating func encodeIfPresentAndNotEmpty<C>(_ value: C?) throws -> Bool where C: Encodable, C: Collection {
        guard let v = value else { return false }
        return try encodeIfNotEmpty(v)
    }
}

public extension UnkeyedEncodingContainer {
    /// Provides an easy method to encode an array of encodable objects in a dynamic way
    ///
    /// The following rules apply when encoding:
    /// 1. If collection count is 0, An empty array gets encoded
    /// 2. If collection count is 1, encodes the object as a single value and not an array
    /// 3. Encodes as a regular array
    ///
    /// - Parameters:
    ///   - collection: The collection to encode
    /// - returns: Returns an indicator if the object was encoded or not
    @discardableResult
    mutating func encodeToSingleOrArray<C>(_ collection: C) throws -> SingleOrArrayEncodedAs where C: Collection, C.Element: Encodable {
        
        if canEncodeSingleFromArray(collection,
                                    at: self.codingPath.appending(index: self.count)) {
            try self.encode(collection[collection.startIndex])
            return .single
        } else {
            try self.nestedUnkeyedContainer() { container in
                for o in collection {
                    try container.encode(o)
                }
            }
            return .array
        }
    }
    
    /// Provides an easy method to encode an array of encodable objects in a dynamic way
    ///
    /// The following rules apply when encoding:
    /// 1. If collection is nil, nothing gets encoded
    /// 2. If collection count is 0, An empty array gets encoded
    /// 3. If collection count is 1, encodes the object as a single value and not an array
    /// 4. Encodes as a regular array
    ///
    /// - Parameters:
    ///   - collection: The collection to encode
    /// - returns: Returns an indicator if the object was encoded or not
    @discardableResult
    mutating func encodeToSingleOrArrayIfPresent<C>(_ collection: C?) throws -> SingleOrArrayEncodedAsIfPresent where C: Collection, C.Element: Encodable {
        guard let collection = collection else { return .none }
        return SingleOrArrayEncodedAsIfPresent(try self.encodeToSingleOrArray(collection))
    }
}

public extension UnkeyedEncodingContainer {
    /// Provides an easy method for encoding dictionaries
    ///
    /// When the key is encoded it must be transformed to one of te following base types: String, Int, UInt, Bool
    /// - Parameter dictionary: The dictionary to encode
    mutating func encodeDictionary<Key, Value>(_ dictionary: [Key: Value]) throws where Key: Encodable, Value: Encodable {
        /*
        var container = self.nestedContainer(keyedBy: CodableKey.self)
        for(key, val) in dictionary {
            let sEncoder = SimpleEncoder()
            sEncoder.codingPath = self.codingPath
            try key.encode(to: sEncoder)
            guard let keyValue = sEncoder.value else {
                throw DecodingError.valueNotFound(Any.self, DecodingError.Context(codingPath: self.codingPath, debugDescription: "Missing Key encoded value"))
                
            }

            if let k = keyValue as? String {
                let codingKey = CodableKey(stringValue: k)
                try container.encode(val, forKey: codingKey)
            } else {
                let codingKey = CodableKey(stringValue: "\(keyValue)")
                try container.encode(val, forKey: codingKey)
            }
        }
        */
        
        let codPath = self.codingPath
        try self.nestedContainer(keyedBy: CodableKey.self) { container in
            for(key, val) in dictionary {
                let sEncoder = SimpleEncoder()
                sEncoder.codingPath = codPath//self.codingPath
                try key.encode(to: sEncoder)
                guard let keyValue = sEncoder.value else {
                    throw DecodingError.valueNotFound(Any.self, DecodingError.Context(codingPath: codPath/*self.codingPath*/, debugDescription: "Missing Key encoded value"))
                    
                }

                if let k = keyValue as? String {
                    let codingKey = CodableKey(stringValue: k)
                    try container.encode(val, forKey: codingKey)
                } else {
                    let codingKey = CodableKey(stringValue: "\(keyValue)")
                    try container.encode(val, forKey: codingKey)
                }
            }
        }
        
    }
    
    /// Provides an easy method for encoding dictionaries
    ///
    /// When the key is encoded it must be transformed to one of te following base types: String, Int, UInt, Bool
    /// - Parameter dictionary: The dictionary to encode
    /// - returns: Returns an indicator if the object was encoded or not 
    @discardableResult
    mutating func encodeDictionaryIfPresent<Key, Value>(_ dictionary: [Key: Value]?) throws -> Bool where Key: Encodable, Value: Encodable {
        guard let dictionary = dictionary else { return false }
        try self.encodeDictionary(dictionary)
        return true
    }
}
